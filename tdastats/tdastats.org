#+AUTHOR: Simon Stoltze
#+EMAIL: sstoltze@gmail.com
#+OPTIONS: toc:nil author:nil date:nil creator:nil
* TDAstats - A pipeline for computing persistent homology
This is a document that tests the [[https://github.com/rrrlw/TDAstats][TDAstats]] framework for computing persistent homology.

** Installation
:PROPERTIES:
:header-args: :cache yes :results output silent :session *R-install* :tangle install.R :eval never-export
:END:
To install the framework, run the following code.
#+BEGIN_SRC R
install.packages("TDAstats")
#+END_SRC

** Tutorial example
:PROPERTIES:
:header-args: :results output silent :session *R-tutorial* :tangle tutorial.R
:END:
The code in this sections is taken from the TDAstats github readme.

First, we load the library:
#+BEGIN_SRC R
library(TDAstats)
#+END_SRC

Then we compute some simple datasets to have something to do analysis on:
#+BEGIN_SRC R
# point cloud: uniform random points in unit square (2-dimensional)
square <- cbind(runif(100), runif(100))

# point cloud: points distributed uniformly around circle (2-dimensional)
angles <- runif(100, 0, 2 * pi)
circ <- cbind(cos(angles), sin(angles))
#+END_SRC

The following code computes the persistent homology of the two datasets:
#+BEGIN_SRC R
  # calculate persistent homology for both datasets
  square.hom <- calculate_homology(square, dim = 1)
  circ.hom <- calculate_homology(circ, dim = 1)
#+END_SRC

And finally we can visualize the results:
#+BEGIN_SRC R :results output graphics :file ./images/persistence-square.png
# visualize first dataset as a persistence diagram
plot_persist(square.hom)
#+END_SRC

#+BEGIN_SRC R :results output graphics :file ./images/barcode-square.png
# visualize first dataset as a barcode diagram
plot_barcode(square.hom)
#+END_SRC

#+BEGIN_SRC R :results output graphics :file ./images/persistence-circle.png
# visualize second dataset as a persistence diagram
plot_persist(circ.hom)
#+END_SRC

#+BEGIN_SRC R :results output graphics :file ./images/barcode-circle.png
# visualize second dataset as a barcode diagram
plot_barcode(circ.hom)
#+END_SRC
And we can visualize the data:
#+BEGIN_SRC R :results graphics :file ./images/data-circle.png
library("lattice")
xyplot(circ[,2] ~ circ[,1])
#+END_SRC
#+BEGIN_SRC R :results graphics :file ./images/data-square.png
xyplot(square[,2] ~ square[,1])
#+END_SRC

*** Data analysis
Now we can look at the generated plots.

**** Square
The points:
[[./images/data-square.png]]

And the homology:
[[./images/persistence-square.png]]
[[./images/barcode-square.png]]

For the square, it seems like the 0^th dimensional homology has a single surviving generator, indicating that the square is connected. Meanwhile, most of the 1^st dimensional generators appear only shortly and then disappear, which indicates that the square has no homology in degree 1 as expected.

**** Circle
Data:
[[./images/data-circle.png]]

Homology:
[[./images/persistence-circle.png]]
[[./images/barcode-circle.png]]

For the circle, we see that the 0^th homology again looks simple, while the first dimensional generator appears relatively early and survives for a long time. This indicates that the circle is probably connected and has a single generator of the homology in degree 1.

** Sphere
:PROPERTIES:
:header-args: :results output :tangle sphere.R :session *R-sphere*
:END:
A small example for the sphere:
#+BEGIN_SRC R :results silent
# Standard parametrisation of the sphere
u = runif(1000, 0, 1)
v = runif(1000, 0, 1)
theta = 2 * pi * u
phi = acos(2 * v - 1)
x = sin(theta) * cos(phi)
y = sin(theta) * sin(phi)
z = cos(theta)
sphere = cbind(x,y,z)
#+END_SRC
Generate the homology:
#+BEGIN_SRC R :results silent
library(TDAstats)
sphere.hom = calculate_homology(sphere, dim=2)
#+END_SRC
Now we can plot the data.
#+BEGIN_SRC R :results silent graphics :file ./images/persistent-sphere.png
# Persistent homology
plot_persist(sphere.hom)
#+END_SRC

#+BEGIN_SRC R :results silent graphics :file ./images/barcode-sphere.png
# Barcode homology
plot_barcode(sphere.hom)
#+END_SRC

The generated data can be visualized as
#+BEGIN_SRC R :results silent graphics :file ./images/data-sphere.png
# Plot the sphere
library("lattice")
cloud(z ~ x + y)
#+END_SRC

Now we can examine the data and the generated homology:
[[./images/data-sphere.png]]

[[./images/persistent-sphere.png]] [[./images/barcode-sphere.png]]


** Torus
:PROPERTIES:
:header-args: :results output :tangle torus.R  :session *R-torus*
:END:
Lets look at two different tori:
#+BEGIN_SRC R :results silent
library(TDAstats)
library(lattice)
u = runif(200,0,2*pi)
v = runif(200,0,2*pi)
r = 1
c = 5
x = (c+r*cos(v))*cos(u)
y = (c+r*cos(v))*sin(u)
z = r*sin(v)
torus = cbind(x,y,z)
#+END_SRC
Plot it:
#+BEGIN_SRC R :results graphics :file ./images/data-torus.png
cloud(z ~ x + y)
#+END_SRC

#+RESULTS:
[[file:./images/data-torus.png]]

#+BEGIN_SRC R :results silent
torus.hom = calculate_homology(torus, dim=2)
#+END_SRC

#+BEGIN_SRC R :results silent graphics :file ./images/persistent-torus.png
# Persistent homology
plot_persist(torus.hom)
#+END_SRC

#+BEGIN_SRC R :results silent graphics :file ./images/barcode-torus.png
# Barcode homology
plot_barcode(torus.hom)
#+END_SRC

And finally visualize the homology:
[[./images/persistent-torus.png]] [[./images/barcode-torus.png]]

We can also do a torus as a product of circles:
#+BEGIN_SRC R :results silent
angles1 <- runif(100, 0, 2 * pi)
angles2 <- runif(100, 0, 2 * pi)
torus_circ <- cbind(cos(angles1), sin(angles1), cos(angles2), sin(angles2))

torus_circ.hom = calculate_homology(torus_circ, dim=2)
#+END_SRC

#+BEGIN_SRC R :results graphics :file ./images/persistent-torus-circ.png
# Persistent homology
plot_persist(torus_circ.hom)
#+END_SRC

#+RESULTS:
[[file:./images/persistent-torus-circ.png]]

#+BEGIN_SRC R :results graphics :file ./images/barcode-torus-circ.png
# Barcode homology
plot_barcode(torus_circ.hom)
#+END_SRC

#+RESULTS:
[[file:./images/barcode-torus-circ.png]]

We can also look at a circle in a different way, as a circle on a torus. This gives
#+BEGIN_SRC R :results silent
angles <- runif(100, 0, 2 * pi)
torus_circ_curve <- cbind(cos(angles), sin(angles), cos(angles), sin(angles))

torus_circ_curve.hom = calculate_homology(torus_circ_curve, dim=2)
#+END_SRC

#+BEGIN_SRC R :results graphics :file ./images/persistent-torus-circ-curve.png
# Persistent homology
plot_persist(torus_circ_curve.hom)
#+END_SRC

#+RESULTS:
[[file:./images/persistent-torus-circ.png]]

#+BEGIN_SRC R :results graphics :file ./images/barcode-torus-circ-curve.png
# Barcode homology
plot_barcode(torus_circ_curve.hom)
#+END_SRC

#+RESULTS:
[[file:./images/barcode-torus-circ.png]]
